'.source.tiger':
  'if … then (…)':
    'prefix': 'if'
    'body': 'if ${1:condition} then ${2:(\n\t$3\n)}$4'
    'description': 'if-then construct'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">if</span> … <span class="syntax--keyword syntax--control syntax--tiger">then</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'then (…)':
    'prefix': 'then'
    'body': 'then ${1:(\n\t$2\n)}$3'
    'description': 'then branch'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">then</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span></span>'
  'else (…)':
    'prefix': 'else'
    'body': 'else ${1:(\n\t$2\n)}$3'
    'description': 'else branch'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">else</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span></span>'
  'else if … then (…)':
    'prefix': 'elif'
    'body': 'else if ${1:condition} then ${2:(\n\t$3\n)}$4'
    'description': 'else-if branch'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">else</span> <span class="syntax--keyword syntax--control syntax--tiger">if</span> … <span class="syntax--keyword syntax--control syntax--tiger">then</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'while … do (…)':
    'prefix': 'while'
    'body': 'while ${1:condition} do ${2:(\n\t$3\n)}$4'
    'description': 'while loop'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">while</span> … <span class="syntax--keyword syntax--control syntax--tiger">do</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'for … := … to … do (…)':
    'prefix': 'for'
    'body': 'for ${1:index} := ${2:min} to ${3:max} do ${4:(\n\t$5\n)}$6'
    'description': 'for loop'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">for</span> … <span class="syntax--keyword syntax--operator syntax--assignment syntax--tiger">:=</span> <span class="syntax--keyword syntax--control syntax--tiger">to</span> … <span class="syntax--keyword syntax--control syntax--tiger">do</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'do (…)':
    'prefix': 'do'
    'body': 'do ${1:(\n\t$2\n)}$3'
    'description': 'loop body'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">do</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'let … in … end':
    'prefix': 'let'
    'body': 'let\n\t$1\nin\n\t$2\nend$3'
    'description': 'let expression'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">let</span> … <span class="syntax--keyword syntax--control syntax--tiger">in</span> … <span class="syntax--keyword syntax--control syntax--tiger">end</span>'
  'in … end':
    'prefix': 'in'
    'body': 'in\n\t$1\nend$2'
    'description': 'let body'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">in</span> … <span class="syntax--keyword syntax--control syntax--tiger">end</span>'
  'type … = …':
    'prefix': 'type'
    'body': 'type ${1:typeName} = ${2:otherType}$3'
    'description': 'new alias type'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">type</span> … <span class="syntax--keyword syntax--operator syntax--comparison syntax--tiger">=</span> …'
  'type … = array of …':
    'prefix': 'array'
    'body': 'type ${1:typeName} = array of ${2:itemType}$3'
    'description': 'new array type'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">type</span> … <span class="syntax--keyword syntax--operator syntax--comparison syntax--tiger">=</span> <span class="syntax--keyword syntax--control syntax--tiger">array</span> <span class="syntax--keyword syntax--control syntax--tiger">of</span> …'
  'type … = {…}':
    'prefix': 'record'
    'body': 'type ${1:typeName} = {${2:${3:fieldName}: ${4:fieldType}}}$5'
    'description': 'new record type'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">type</span> … <span class="syntax--keyword syntax--operator syntax--comparison syntax--tiger">=</span> <span class="syntax--meta syntax--brace syntax--curly syntax--tiger">{</span>…<span class="syntax--meta syntax--brace syntax--curly syntax--tiger">}</span>'
  'function …(…) = (…)':
    'prefix': 'procedure'
    'body': 'function ${1:functionName}(${2:${3:parameterName}: ${4:parameterType}}) = ${5:(\n\t$6\n)}$7'
    'description': 'new function'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">function</span> …<span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span> <span class="syntax--keyword syntax--operator syntax--comparison syntax--tiger">=</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'function …(…):… = (…)':
    'prefix': 'function'
    'body': 'function ${1:functionName}(${2:${3:parameterName}: ${4:parameterType}}):${5:returnType} = ${6:(\n\t$7\n)}$8'
    'description': 'new function'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">function</span> …<span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span>… <span class="syntax--keyword syntax--operator syntax--comparison syntax--tiger">=</span> <span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span>…<span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'var … := …':
    'prefix': 'auto'
    'body': 'var ${1:variableName} := ${2:initialValue}$3'
    'description': 'new variable'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">var</span> … <span class="syntax--keyword syntax--operator syntax--assignment syntax--tiger">:=</span> …'
  'var …:… := …':
    'prefix': 'variable'
    'body': 'var ${1:variableName}:${2:variableType} := ${3:initialValue}$4'
    'description': 'new variable'
    'rightLabelHTML': '<span class="syntax--keyword syntax--control syntax--tiger">var</span> …<span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span>… <span class="syntax--keyword syntax--operator syntax--assignment syntax--tiger">:=</span> …'
  'chr(i)':
    'prefix': 'chr'
    'body': 'chr(${1:i})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">chr</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">i</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span>'
  'concat(s1, s2)':
    'prefix': 'concat'
    'body': 'concat(${1:s1}, ${2:s2})$3'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">concat</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">s1</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span><span class="syntax--punctuation syntax--separator syntax--comma syntax--tiger">,</span> <span class="syntax--variable syntax--other syntax--identifier syntax--tiger">s2</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span>'
  'exit(i)':
    'prefix': 'exit'
    'body': 'exit(${1:i})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">exit</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">i</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'flush()':
    'prefix': 'flush'
    'body': 'flush()$1'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">flush</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'getchar()':
    'prefix': 'getchar'
    'body': 'getchar()$1'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">getchar</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span>'
  'not(i)':
    'prefix': 'not'
    'body': 'not(${1:i})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">not</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">i</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span></span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span>'
  'ord(s)':
    'prefix': 'ord'
    'body': 'ord(${1:s})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">ord</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">s</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span></span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span>'
  'print(s)':
    'prefix': 'print'
    'body': 'print(${1:s})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">print</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">s</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span>'
  'size(s)':
    'prefix': 'size'
    'body': 'size(${1:s})$2'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">size</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">s</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span></span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span>'
  'substring(s, f, n)':
    'prefix': 'substring'
    'body': 'substring(${1:s}, ${2:f}, ${3:n})$4'
    'rightLabelHTML': '<span class="syntax--variable syntax--other syntax--identifier syntax--tiger">substring</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">(</span><span class="syntax--variable syntax--other syntax--identifier syntax--tiger">s</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span><span class="syntax--punctuation syntax--separator syntax--comma syntax--tiger">,</span> <span class="syntax--variable syntax--other syntax--identifier syntax--tiger">f</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span><span class="syntax--punctuation syntax--separator syntax--comma syntax--tiger">,</span> <span class="syntax--variable syntax--other syntax--identifier syntax--tiger">n</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--int syntax--tiger">int</span><span class="syntax--meta syntax--brace syntax--round syntax--tiger">)</span><span class="syntax--punctuation syntax--separator syntax--colon syntax--tiger">:</span><span class="syntax--storage syntax--type syntax--str syntax--tiger">string</span>'
